/**
 * Use Breadth-first search (BFS).
 * @param {String[]} grid
 * @param {Number} startX
 * @param {Number} startY
 * @param {Number} goalX
 * @param {Number} goalY
 * @returns {Number}
 */
function minimumMoves(grid, startX, startY, goalX, goalY) {
  /** @type {number[][]} */
  const gridData = grid.map((e) =>
    e.split("").map((e) => (e === "X" ? -1 : 0))
  );

  const directions = [
    [0, -1],
    [0, 1],
    [1, 0],
    [-1, 0],
  ]; // [x, y] Up, Dowm, Right, Left

  const queue = [];
  queue.push({ x: startX, y: startY });

  while (queue.length) {
    const { x: currentX, y: currentY } = queue.shift();
    const currentValue = gridData[currentX][currentY];

    for (const direction of directions) {
      let x = currentX;
      let y = currentY;
      while (true) {
        x += direction[0];
        y += direction[1];
        const nextPoint = { x, y };

        if (nextPoint.x < 0 || nextPoint.x > grid.length - 1) break;
        if (nextPoint.y < 0 || nextPoint.y > grid.length - 1) break;

        // Return the minimum moves to reach the goal.
        if (nextPoint.x === goalX && nextPoint.y === goalY) {
          gridData[nextPoint.x][nextPoint.y] = currentValue + 1;
          return gridData[goalX][goalY];
        }

        if (gridData[nextPoint.x][nextPoint.y] === -1) break;
        else if (gridData[nextPoint.x][nextPoint.y] !== 0) continue;
        gridData[nextPoint.x][nextPoint.y] = currentValue + 1;
        queue.push(nextPoint);
      }
    }
  }
}

// const arr =
//   `.X..X.X..X..X.......XX..XX....X.X...X........X.....XX.X.X...X.X...X..X
// ...X.....XX.........XX......X.X.......X......X..XX.X..X..X.....X.X....
// ............X.......X........X..X.X......X.......X...X.X.....X.X...X..
// .........X....XX.X.X.X......X..X......X.....X.........X..X.......XX...
// .....X.......X.X.....XX.....X.XXX.........X.....X.X....XX......XX.....
// ..X....X..........................X...X.........XX.....X..............
// ......X.......X...XX.....X.X....X.......X.............X........X.X....
// ...X.X.XX.XX...X............XX...X.....X..X..X....X.........X.........
// X.XX........X..........XX..X.X..X.XX.XXX..X........X..X.....XX......X.
// ......X..XXX.......X..XX.XX...........X.....XX..X..X.X......X.X...X...
// X........X.X....X..X..................XX......X..X.......X.....X..X...
// ...X......X....XX.......X.....X...........X..X....X.....XXX...X...X.X.
// ......X..X....X.XXX.X.....X..X....XX.....X....X.....X...X...........X.
// ....X..X.X...XX..X.X.X..X.....X......X..X......X.X.X.X......X......X..
// ..X..............X...X.........X........X...........X..X.X......X....X
// .X....X..X......X.........X.....XX....XX............XX..X...X...X.....
// ...........X....X.X...XX...X......X...............X....XX..........X..
// .X..X..XX..X...X.....XX...XX...........X.....X..XXX.........XX..X....X
// .XX........XX.XX..........XX............X.........X.XXXX.X.X.........X
// .....X........X......X.............X.......X............X....X...X..X.
// X..X.X..X...........XX..X.....X......X...XXX........XX...........X....
// ..X....X.XX.X.....X..X..X...........X......X..........X.....X.......X.
// ..........X.X...X.....X....XX.XX.......XX...X.............XXX..X..X..X
// X.....X....XX...X.X...X.X.X..X.X..X....X..X..XXX...X...........X.X.X..
// ...XX.X....X...X.....XX...X.....X..XXX.......XX......X....XX......X.XX
// X..X......X.....X......X.X...X............X.X..........X.X.X..X......X
// ..X....X..X.X....XX....X.XXX..X.XX.....X........X..X...X...X.X......X.
// .......X...............XX..........X...X......XX...X.X........X.......
// XXX....X.....X..X.....X.X.....XX..X.......X..X.....XX.......X..X.....X
// .......X......X.......X..X.......X.........X...X.........X...X.....XXX
// ...X..X....X....X.X..XX......X.......X............X...................
// .X.....X............X...............X.....X.X...X...X.XXX..X....X..XXX
// ..........X........X...........XX..........X..............X.....XX.X..
// .X...............XX..X.X......................X..X...X......X.....X...
// XX..X.X..XXXX..X..........XX..XX..X.............X................XX...
// ......X.XX..X...............X.X....X....X......X.....X..XX............
// ..X.X..X..X......X..X................X......X...X......X.XX...X..X....
// .........X............X......X......XX.X..................X.....X.....
// X..X....X...........X.....XX..X.......XXX.....XXX.......X....X.....X.X
// XX..............XXX....X.X......XX..........X....X.....X......X.......
// .......X.XX.......X......X..XXX.............X.......XX.....X.XX.......
// ..X.X.....XXX.X.......X.X.........X..X...X...X..X.....X.....XX.......X
// ..XX........XX....X..XX..X...XXX.................X..X...........X.....
// ...X........X..X.....X......X.X...XXX..X..XX.X..X...X........X.XXXX...
// ...X.X....X.....X.X.......X..............X...X.X.XX...X...XX.X.......X
// ......X...........X.......X.....XXXX...........X.X.XX......X...X......
// ....X......X......XXX..XX.X.......X.............X.......X.........X..X
// ..X..X..X......X.....X............XX....X..........X......X..X..X.X...
// X.........X..X..XX........X.X.X......................X.X....X.....X...
// .....X.X...X.X..X...X...XX...X...X............X..............X...X....
// ......................X....X...X....X.X..............XX.....X.........
// .................X..X.....X.....XX......X.......X......X.........X.X..
// ...........X..X...X.....X..X.............X............X..X..XX.X......
// X..........X.X..X..X..........X.XX.............X...X.XX........X......
// ..XX.XX.....X.....X..X.....X.....X...X...........X..X..X....X.........
// ..X.XX...X.X....X.X....X..X.X...X..X.........X..X.....................
// ............X...................X....X.X......X.XX..X...X....X..XX.XX.
// ...X..X.X....X..............X..X.....X.X.........X..........X.......X.
// ..X...........................X......X.X...X........X.................
// .........X..X...............X...........X..X.X......X.................
// ..XX.............XX.X.........X....XX........X..X...X........X.....X..
// .............X.X....X.X...X...X.....X...X.....X.....X..X......X......X
// .....X....X.X.X...XXX...X.X.X.X...X...X.X.....X..X...........X.X.X...X
// ...XX.X...XX......X..........X.......XX..X.......X...X..X.X......X....
// .......X.......X....................X..........XX.....XXXX..X.X.......
// .....X...XX...X........X..X...X.X...X..........X...X.........X........
// XXX..XX.....X...................X.....X.X.......X.X.X..X..............
// ....X.........X.....X.X...XX.....XX......X..........XX..X.XXX...X.X...
// ..X...............X.XX.......X....X......X......X.X.X.......X.......X.
// ..X.X.......XXX..X....X...X....X.....X.X......X..X......X.............`.split(
//     /\n|\r/
//   );

const arr = `.X..XX...X
X.........
.X.......X
..........
........X.
.X...XXX..
.....X..XX
.....X.X..
..........
.....X..XX`.split(/\n|\r/);

minimumMoves(arr || [".X.", ".X.", "..."], 9, 1, 9, 6);
